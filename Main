class AMORR_AI:
    def __init__(self):
        self.welcome_message = "Qarabag AzerbaycandÄ±r! How can I help you today?"
        self.supported_mine_types = {
            "PMN-2": "Anti-personnel mine, typically activated by pressure.",
            "TM-62": "Anti-tank mine, pressure or magnetically activated."
        }
        self.detonation_methods = [
            "pressure activation", "tripwire", "magnetic influence", "infrared sensors",
            "vibration detonation", "acoustic sensors", "timed detonation", 
            "command detonation", "tilt rod activation", "chemical sensors", 
            "anti-tampering devices"
        ]
        
    def identify_mine(self, mine_name):
        """ Simulates identification of a landmine. """
        mine_info = self.supported_mine_types.get(mine_name, "Mine not recognized. Please consult an expert.")
        return f"Identification result: {mine_info}"
    
    def defusal_instructions(self, mine_name):
        """ Simulates providing defusal instructions for a landmine. """
        if mine_name == "PMN-2":
            return "Defusal steps for PMN-2:\n1. Ensure the area is clear.\n2. Carefully expose the mine.\n3. Disarm the detonator by removing the pressure plate."
        elif mine_name == "TM-62":
            return "Defusal steps for TM-62:\n1. Do not approach directly from the front.\n2. Expose the sides and deactivate the fuse.\n3. Carefully remove the explosive component."
        else:
            return "Defusal instructions not available for this mine. Consult a professional."
    
    def show_detonation_methods(self):
        """ Displays the types of detonation methods the AI recognizes. """
        return "Possible detonation methods:\n" + "\n".join(self.detonation_methods)
    
    def predict_minefield_risk(self, region):
        """ Simulates predicting the risk of minefields in a given area. """
        # Placeholder risk assessment logic
        if region == "Nagorno-Karabakh":
            return "High risk of minefields in Nagorno-Karabakh. Known conflict area."
        else:
            return "Risk data unavailable for this region. Please input detailed historical data."

    def process_input(self, user_input):
        """ Main method to handle input and simulate AI behavior. """
        if "identify" in user_input:
            mine_name = user_input.split("identify")[1].strip()
            return self.identify_mine(mine_name)
        elif "defuse" in user_input:
            mine_name = user_input.split("defuse")[1].strip()
            return self.defusal_instructions(mine_name)
        elif "detonation methods" in user_input:
            return self.show_detonation_methods()
        elif "predict risk" in user_input:
            region = user_input.split("predict risk")[1].strip()
            return self.predict_minefield_risk(region)
        else:
            return "Sorry, I did not understand your request. Please try again."

# Simulate interaction with AMORR AI
amorr_ai = AMORR_AI()

# Example interactions
print(amorr_ai.welcome_message)
print(amorr_ai.process_input("identify PMN-2"))
print(amorr_ai.process_input("defuse TM-62"))
print(amorr_ai.process_input("detonation methods"))
print(amorr_ai.process_input("predict risk Nagorno-Karabakh"))
